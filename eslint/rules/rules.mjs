const stylisticRules = {
    '@stylistic/arrow-parens': ['warn', 'as-needed'],
    '@stylistic/brace-style': ['error', '1tbs'],
    '@stylistic/comma-dangle': ['error', 'always-multiline'],
    '@stylistic/eol-last': 'error',
    '@stylistic/indent': ['error', 2],
    '@stylistic/linebreak-style': 'off',
    '@stylistic/max-len': ['error', {
        'code': 120,
        'ignoreComments': true,
        'ignoreUrls': true,
    }],
    '@stylistic/new-parens': 'error',
    '@stylistic/no-extra-semi': 'off',
    '@stylistic/no-mixed-spaces-and-tabs': 'error',
    '@stylistic/no-multiple-empty-lines': 'off',
    '@stylistic/no-trailing-spaces': 'off',
    '@stylistic/quote-props': ['error', 'consistent-as-needed'],
    '@stylistic/quotes': ['error', 'single'],
    '@stylistic/semi': ['error', 'never'],
    '@stylistic/space-before-function-paren': ['error', {
        'anonymous': 'never', 'asyncArrow': 'always', 'named': 'never',
    }],
}

const jsRules = {
    'arrow-body-style': 'error',
    camelcase: 'error',
    complexity: 'off',
    curly: 'error',
    eqeqeq: ['error', 'smart'],
    'guard-for-in': 'error',
    'id-denylist': [
        'error',
        'any',
        'Number',
        'number',
        'String',
        'string',
        'Boolean',
        'boolean',
        'Undefined',
        'undefined',
    ],
    'max-classes-per-file': ['error', 1],
    'no-array-constructor': 'error',
    'no-bitwise': 'error',
    'no-caller': 'error',
    'no-case-declarations': 'error',
    'no-console': 'warn',
    'no-delete-var': 'error',
    'no-empty-function': 'off',
    'no-empty-static-block': 'off',
    'no-eval': 'error',
    'no-extra-boolean-cast': 'error',
    'no-invalid-this': 'error',
    'no-new-native-nonconstructor': 'error',
    'no-new-wrappers': 'error',
    'no-octal': 'error',
    'no-redeclare': 'error',
    'no-regex-spaces': 'error',
    'no-shadow': [
        'error',
        {
            hoist: 'all',
        },
    ],
    'no-throw-literal': 'error',
    'no-undef-init': 'error',
    'no-underscore-dangle': 'error',
    'no-var': 'error',
    'object-shorthand': 'error',
    'one-var': ['error', 'never'],
    'prefer-arrow-callback': 'warn',
    'prefer-const': 'error',
    radix: 'error',
    'spaced-comment': [
        'error',
        'always',
        {
            markers: ['/'],
        },
    ],
};

const tsRules = {
    'typescript-eslint/adjacent-overload-signatures': 'error',
    'typescript-eslint/array-type': [
        'error',
        {
            default: 'array-simple',
        },
    ],
    'typescript-eslint/ban-ts-comment': [
        'warn',
        {
            'ts-ignore': 'allow-with-description',
        },
    ],
    'typescript-eslint/consistent-type-assertions': 'error',
    'typescript-eslint/consistent-type-definitions': 'error',
    'typescript-eslint/dot-notation': 'error',
    'typescript-eslint/explicit-member-accessibility': 'off',
    'typescript-eslint/explicit-module-boundary-types': 'warn',
    'typescript-eslint/interface-name-prefix': 'off',
    'typescript-eslint/member-ordering': [
        'error',
        {
            default: [
                'signature',
                'field',
                'constructor',
                'public-method',
                'method',
                'public-static-method',
                'static-method',
            ],
        },
    ],
    'typescript-eslint/no-array-constructor': 'error',
    'typescript-eslint/no-empty-function': 'error',
    'typescript-eslint/no-empty-interface': 'error',
    'typescript-eslint/no-empty-object-type': 'error',
    'typescript-eslint/no-explicit-any': 'error',
    'typescript-eslint/no-extra-non-null-assertion': 'error',
    'typescript-eslint/no-inferrable-types': 'error',
    'typescript-eslint/no-misused-new': 'error',
    'typescript-eslint/no-namespace': 'error',
    'typescript-eslint/no-non-null-asserted-optional-chain': 'error',
    'typescript-eslint/no-non-null-assertion': 'warn',
    'typescript-eslint/no-parameter-properties': 'off',
    'typescript-eslint/no-this-alias': 'error',
    'typescript-eslint/no-unsafe-function-type': 'error',
    'typescript-eslint/no-unused-expressions': 'off',
    'typescript-eslint/no-unused-vars': 'warn',
    'typescript-eslint/no-use-before-define': 'off',
    'typescript-eslint/no-var-requires': 'error',
    'typescript-eslint/no-wrapper-object-types': 'error',
    'typescript-eslint/prefer-as-const': 'error',
    'typescript-eslint/prefer-for-of': 'error',
    'typescript-eslint/prefer-function-type': 'error',
    'typescript-eslint/prefer-namespace-keyword': 'error',
    'typescript-eslint/triple-slash-reference': [
        'error',
        {
            path: 'always',
            types: 'prefer-import',
            lib: 'always',
        },
    ],
    'typescript-eslint/unified-signatures': 'error',
};

const wcCustomRules = {
    'wc/attach-shadow-constructor': 'error',
    'wc/define-tag-after-class-definition': 'off',
    'wc/expose-class-on-global': 'off',
    'wc/file-name-matches-element': 'error',
    'wc/guard-define-call': 'error',
    'wc/guard-super-call': 'error',
    'wc/max-elements-per-file': 'error',
    'wc/no-child-traversal-in-attributechangedcallback': 'error',
    'wc/no-child-traversal-in-connectedcallback': 'error',
    'wc/no-closed-shadow-root': 'error',
    'wc/no-constructor': 'error',
    'wc/no-constructor-attributes': 'error',
    'wc/no-constructor-params': 'error',
    'wc/no-customized-built-in-elements': 'error',
    'wc/no-exports-with-element': 'error',
    'wc/no-invalid-element-name': 'error',
    'wc/no-invalid-extends': 'error',
    'wc/no-method-prefixed-with-on': 'error',
    'wc/no-self-class': 'error',
    'wc/no-typos': 'error',
    'wc/require-listener-teardown': 'error',
    'wc/tag-name-matches-class': 'error',
};

const mochaCustomRules = {
    'mocha/no-mocha-arrows': 'off',
    'mocha/no-setup-in-describe': 'off',
};

const importCustomRules = {
    'import/no-default-export': 'off',
    'import/order': 'error',
    'import/named': 'off',
};

export default {
    js: { ...jsRules, ...stylisticRules },
    ts: tsRules,
    wc: wcCustomRules,
    mocha: mochaCustomRules,
    import: importCustomRules,
};
